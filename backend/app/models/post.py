from pydantic import BaseModel, Field, root_validator
from typing import Optional, List, Dict
from enum import Enum

class PostType(str, Enum):
    post = "post"
    poll = "poll"

class Post(BaseModel):
    post_id: Optional[str] = Field(None, description="Unique identifier for the post (generated by backend)")
    user_id: str = Field(..., description="ID of the user who created the post")
    content: str = Field(..., description="Text content of the post")
    post_type: PostType = Field(PostType.post, description="Type of the post (post or poll)")
    media_url: Optional[str] = Field(None, description="Optional media URL")
    
    poll_question: Optional[str] = Field(None, description="Poll question if post is a poll")
    poll_options: Optional[List[str]] = Field(None, description="List of poll options")
    poll_votes: Dict[str, int] = Field(default_factory=dict, description="Map of poll options to vote counts")
    
    likes: int = Field(0, ge=0, description="Number of likes (non-negative)")
